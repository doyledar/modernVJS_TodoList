VANILLA JS MODERNE - TODO LIST

VIDEO 1

parcel bundler :
npm init -y

package.json
"main": "src/js/main.js",

Créer le nouveau dossier src
Y créer un fichier index.html où on charge 
<script src: "./src/main.js"></script>
et on ajoute un div avec id app
Créer un fichier /js/main.js



Tester le bundler

parcel src/index.html
Va créer un dossier dist et un dossier .cache qu'on va mettre en gitignore
Amender le commit initial après avoir vidé le gitignore

On va faire un build

parcel build src/index.html

http://localhost:1234



VIDEO 2

Lancer le parcel

parcel src/index.html


Créer un tableau avec un contenu de type json
const todos = [
	{id: 1, content: "tâche 1", completed: false},
	{id: 2, content: "tâche 2", completed: false}
];

class Todo {
	constructor (todo){
		this.id = todo.id;
		this.content = todo.content;
		this.completed = todo.completed;
	}
}

class TodoList{
	constructor (data){
	this.elt = document.querySelector(data.elt);
	this.todos = [];
	this.loadTodos(data.todos);
	console.table(this.todos);
	}
	loadTodos (todos){
		for (let todo of todos){
			this.todos.push(new Todo(todo));
		}
	}	  
}

new TodoList({
	elt: '#app',
	todos   // ou todos:todos 	
});



ENSUITE, on va faire des IMPORTS

import todos from './data.js';
où on met 
export default et le tableau avec les tâches (ATTENTION sans le const todos devant => UNIQUEMENT le tableau)


import TodoList from './modules/TodoList.js';
y mettre 
export default 
et le constructeur de TodoList

idem avec './modules/Todo.js
avec la classe Todo
ATTENTION, mettre le import dans le TodoList.js 
et chemin import Todo from './Todo.js';



VIDEO 3  (template => mise en page de l'app)

A la place du console.table, on va lancer une fonction
this.render();

Dans le render qu'on met après le load 
render(){
	this.elt.innerHTML = this.template;
}

copier les CSS et les mettre dans le src
ajouter le lien dans le fichier html href = "./css/base.css'/>
href = "./css/index.css'/>

mettre le code HTML dans un fichier externe

import todoListTemplate from './templates/todoList';
export defaut 
code HTML

dans le constructeur data
rajouter this.template = todoListTemplate;

Supprimer les li du code HTML


Ne pas oublier les ` ` dans le template

VIDEO 4 - intégration du template des todo (=> des li)

Dans le render de la todolist, faire une boucle pour faire un render de chaque todo
=>
for (let todo of this.todos){
	todo.render();
}


Dans le todo.js, ajouter une méthode render
On ne peut pas mettre le render dans le constructeur du todo car le html n'existe pas encore
render(){
		
}


dans todo.js
import todoTemplate from './templates/todo';

this.template = todo.template;

=> dans todo.template
export default ` 
HTML li
`



A METTRE DANS LE RENDER
render(){
	const newTodo = document.createElement('div');
	newTodo.innerHTML = this.template;
	document.querySelector('.todo-list').appendChild(newTodo);
}

Mais on a un problème : un div contient un li => pas accepté par le W3C
=>
render(){
	const newTodo = document.createElement('li');
	newTodo.classList.add('listItem');
	newTodo.setAttribute('data-id', this.todo);
	if(this.completed == true){
		newTodoClassList.add('completed');	
	}
	newTodo.innerHTML = this.template;
	document.queryselector('.todo-list').appendChild(newTodo);
}



MAIS trop lourd => On fait qd-même un div

Et il faut aussi remplacer les trucs statiques par les données du todo .  
Dans le template, il faut remplacer les trucs dynamiques

this.template = this.template.replace();

// boucle for in et non for of pour parcourir les propriétés // d'un OBJET

boucle for (let propriete in this){
	this.template = this.template.replace('{{'+propriete+'}}', this[propriete]);
}


Dans le HTML data-id ="{{id}}"
		label {{content}} 


newTodo.innerHTML = this.template;
document.querySelector('.todo-list').appendChild(newTodo);

Le constructeur n'est pas censé connaître le .todo-list car fait partie du parent.


=> ASTUCE
Dans le constructeur du todo, on va envoyer data au lieu de Todo

//data: {
//	parent: TodoList,
//	todo: {id: 1, content: "Tâche1", completed: false}
//}
Remplacer le querySelector par
Envoyer dans todolist.js
push (newTodo({parent: this, todo: todo}));

dans todo.js 
constructor (data){

this.parent = data.parent; 
...

Dans le contructeur du TodoList, dans le loadTodos,
	this.todos.push(new Todo({parent: this, todo}));


constructor(data){
	this.elt = document.querySelector(data.elt);
	//this.listElt = this.elt.querySelector('.todo-list);
	// pas OK car le todo-list n'existe pas encore !
	this.listElt;  // je le déclare simplement

Ensuite, dan le render du todolist, je peux mettre
this.list = this.elt.querySelector('.todo-list');



ENFIN, 
pour le completed et le checked, on ne peut pas mettre une propriété de l'objet comme on l'a fait pour id et content
=> class="{{isCompletedClass}}"
{{isCompletedChecked}}

=> dans le render du todo
this.template = this.template.replace('{{isCompletedClass}}', (this.completed === true)?'completed':'');
this.template = this.template.replace('{{isCompletedChecked}}', (this.checked === true)?'checked="checked"':'');



VIDEO 5

Création d'une nouvelle méthode pour le remplacement des éléments statiques dans le render du Todo

Elle ne sera appelable qu'à parir du render (méthode privée => _)

_replaceInTemplate(){
	y mettre les replace
}

Dans le render, 
this._replaceInTemplate();

Rendre interactif AJOUT TACHE

Dans le TodoList.js, après avoir affiché les todos
this.activerBtns();

addTodo(){
	const content = this.elt.querySelector('.new-todo').value;
	const id = this.todos[this.todos.length - 1].id + 1;
	const todo = {id, content: content, completed: false};
	const newTodo  = new Todo({parent: this, todo});
	this.todos.push(newTodo);
	newTodo.render();
	this.elt.querySelector('.new-todo').value = '';
}


// LE THIS EST LE DERNIER ELEMENT AVANT LA FONCTION ANONYME => newTodo => on utilise un fonction fléchée, transparente pour le this
activerBtns(){
	this.elt.querySelector('.new-todo').onkeyup = (e) =>{
	if(e.keyCode === 13){
		
}	
}
};


VIDEO 6


dans le constructeur
this.notCompletedNumber;

Au niveau de la liste, après le render, 
setNotCompletedNumber(){
	// méthode array filter
	this.notCompletedNumber = this.todos.filter(function(todo){
	return todo.completed === false;
}).length;	
this.elt.querySelector('#todo-count').innerText = this.notCompletedNumber;	
}


Lancer la méthode après le rendu, après le for


Il faut la relancer qd on fait un addTodo



VIDEO 7

Lié à une Todo et plus à la TodoList

Au moment du render, on peut faire
this._activerBtns();


_toggleCompleted(){
	this.completed = ! this.completed;
	this.elt.querySelector('li').classList.toggle('completed');
}

_activerBtns(){
	this.elt.querySelector('.toggle').onclick =() => {
		this._toggleCompleted();
}
};

dans le constructeur
this.elt;

dans le render
this.elt = document.createElement('div');

plus de newtodo et on appendChild(list.elt);

Il faut relancer la méthode setNotCompletedNumber
this.parent.setNotCompletedNumber();


Attention dans le replace des todos
Il faut changer 



VIDEO 8
Supprimer une tâche

Lié à la todo
classe .destroy

this._destroy

_destroy
this.elt.remove();
this.parent.removeOneById(this.id);
this.parent.SetNotCompletedNumber();

Au niveau du parent, todoList.js
removeOneById(id){
  this.todos = this.todos.filter(function(todo){
	return todo.id != id;
});	
}

VIDEO 9
Modifier une tâche

Au niveau du todo
Activer label - classe editable

_edit(){
	this.elt.querySelector('.editable').innerHTML = `
	<input type="text" class="validate" value : "${this.content}" />
`;
this._activerBtns();
}

this.elt.querySelector('.editable').ondblclick = () {
	this._edit();
}


if(this.elt.querySelector('.validate')){
				this.elt.querySelector('.validate').onkeyup = (e) =>{
				if(e.keyCode === 13){
				this._validate();
					}
				}
			}


_validate(){
			//alert("coucou");
			this.content = this.elt.querySelector('.validate').value;
			this.elt.querySelector('.editable').innerHTML = this.content;
			this._activerBtns();
	}



VIDEO 10
Les FILTRES

On rajoute une classe filter sur les liens des filtres, dans la todolist

Ensuite, il faut les capturer au niveau de la todolist

Dans activerBtns, rajouter 
	const filterBtns = this.elt.querySelectorAll(.filter);
	for (let filterBtn of filterBtns){
		filterBtn.onclick = () => {
				this._filter();
		}
	}

Dans le template de la todolist, rajouter un data-filter = "nomFiltre"

=>

const filterBtns = this.elt.querySelectorAll('.filter');
	for (let filterBtn of filterBtns){
		filterBtn.onclick = () => {
				this._filter(filterBtn.dataset.filter);
		}
	}
};_filter(filter){
		alert(filter);
	}


Faire un switch dans la fonction _filter




Créer la fonction _filter()



LOCAL STORAGE

dans le main

window.localStorage.test = "coucou";

alert(window.localStorage.test);



Dans la todolist

REmplacer this.todo = [];
this._loadTodos(data.todos);


dans load
_loadTodos(todos){
	if(!window.localStorage.todos){
		window.localStoarge.todos = JSON.stringify		(todos);
	}
	console.table(JSON.parse(localStorage.todos));
}